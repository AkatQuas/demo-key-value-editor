{"version":3,"sources":["utils.tsx","PairItem.tsx","PairReducer.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["trimPair","str","split","map","a","trim","trimAndFormat","join","checkFormat","pair","Array","isArray","length","e","OnePair","props","useState","inputVisible","setInputVisible","value","temp","setTemp","inputError","setInputError","className","type","size","onChange","target","onPressEnter","dispatch","payload","index","closable","onClick","onClose","reducer","state","action","undefined","push","slice","splice","App","useReducer","PairReducer","item","idx","key","placeholder","icon","list","o","reduce","acc","k","v","console","log","JSON","stringify","printList","Title","level","src","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAUO,SAASA,EAASC,GACvB,OAAOA,EAAIC,MAAM,KAAKC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,UAG5B,SAASC,EAAcL,GAC5B,OAAOD,EAASC,GAAKM,KAAK,KAGrB,SAASC,EAAYP,GAC1B,IACE,IAAMQ,EAAOT,EAASC,GACtB,OAAOS,MAAMC,QAAQF,IAAyB,IAAhBA,EAAKG,QAAgBH,EAAK,GAAGG,OAAS,GAAKH,EAAK,GAAGG,OAAS,EAC1F,MAAOC,GACP,OAAO,G,aCnBI,SAASC,EAAQC,GAI5B,IAAD,EACuCC,oBAAS,GADhD,mBACMC,EADN,KACoBC,EADpB,OAEuBF,mBAASD,EAAMI,OAFtC,mBAEMC,EAFN,KAEYC,EAFZ,OAGmCL,oBAAS,GAH5C,mBAGMM,EAHN,KAGkBC,EAHlB,KAgBD,OAAON,EACL,0BAAMO,UAAW,gBAAkBF,EAAa,aAAe,KAC7D,kBAAC,IAAD,CACEG,KAAK,OACLC,KAAK,QACLP,MAAOC,EACPO,SAAU,SAACd,GAAD,OAAOQ,EAAQR,EAAEe,OAAOT,QAClCU,aAAc,WAnBL,IAACV,EACAX,EADAW,EAmBiBC,IAhB7BL,EAAMe,SAAS,CAAEL,KAAM,SAAUM,QAAS,CAAEZ,QAAOa,MAAOjB,EAAMiB,SAChEd,GAAgB,GAChBG,EAAQF,GACRI,GAAc,IAEdA,GAAc,OAed,kBAAC,IAAD,CACEU,UAAQ,EACRC,QAAS,kBAAMhB,GAAgB,IAC/BiB,QAAS,kBAAMpB,EAAMe,SAAS,CAAEL,KAAM,SAAUM,QAAS,CAAEC,MAAOjB,EAAMiB,WACxEjB,EAAMI,OCrCC,SAASiB,EAAQC,EAAsBC,GAAwE,IACpHb,EAAkBa,EAAlBb,KAAMM,EAAYO,EAAZP,QACd,OAAQN,GACN,IAAK,SAAW,IACNN,EAAUY,EAAVZ,MACR,YAAcoB,IAAVpB,EACKkB,GAETA,EAAMG,KAAKlC,EAAca,IAClBkB,EAAMI,MAAM,IAErB,IAAK,SAAW,IACNT,EAAUD,EAAVC,MACR,YAAcO,IAAVP,EACKK,EAELL,GAASK,EAAMzB,OAAiByB,GACpCA,EAAMK,OAAOV,EAAO,GACbK,EAAMI,MAAM,IAErB,IAAK,SAAW,IACNT,EAAiBD,EAAjBC,MAAOb,EAAUY,EAAVZ,MACf,YAAcoB,IAAVP,QAAiCO,IAAVpB,EAClBkB,GAETA,EAAMK,OAAOV,EAAO,EAAG1B,EAAca,IAC9BkB,EAAMI,MAAM,IAErB,IAAK,QACH,OAAOJ,EAAMzB,OAAS,EAAI,GAAKyB,EACjC,QACE,OAAOA,GCyCEM,MAnEf,WAAgB,IAAD,EACaC,qBAAWC,EAAa,IADrC,mBACNR,EADM,KACCP,EADD,OAE2Bd,oBAAS,GAFpC,mBAENC,EAFM,KAEQC,EAFR,OAGuBF,oBAAS,GAHhC,mBAGNM,EAHM,KAGMC,EAHN,OAIWP,mBAAS,IAJpB,mBAINI,EAJM,KAIAC,EAJA,KAkBb,OACE,yBAAKG,UAAU,OACb,6BACE,6EAEEa,EAAMlC,KAAI,SAAC2C,EAAMC,GAAP,OACR,kBAAC,EAAD,CACEC,IAAKF,EAAOC,EACZ5B,MAAO2B,EACPd,MAAOe,EACPjB,SAAUA,OAKdb,EACE,0BAAMO,UAAW,gBAAkBF,EAAa,aAAe,KAC7D,kBAAC,IAAD,CACEG,KAAK,OACLC,KAAK,QACLuB,YAAY,8DACZ9B,MAAOC,EACPO,SAAU,SAACd,GAAD,OAAOQ,EAAQR,EAAEe,OAAOT,QAClCU,aAAc,WAnCN,IAACpB,EACPD,EADOC,EAmCyBW,IAhC5CU,EAAS,CAAEL,KAAM,SAAUM,QAAS,CAAEZ,MAAOV,KAC7CY,EAAQ,IACRH,GAAgB,GAChBK,GAAc,IAEdA,GAAc,OA+BN,kBAAC,IAAD,CACEG,KAAK,QACLD,KAAK,SACLyB,KAAK,OACLhB,QAAS,kBAAMhB,GAAgB,KAJjC,iBASR,yBAAKM,UAAU,WACb,kBAAC,IAAD,CAAQC,KAAK,UAAUS,QAAS,kBH9DjC,SAAmBiB,GACxB,IAAMC,EAAID,EACPE,QAAO,SAACC,EAA8BR,GAAkB,IAAD,EACvCA,EAAK5C,MAAM,KAAKC,KAAI,SAAAC,GAAC,OAAIA,EAAEC,UADY,mBAC/CkD,EAD+C,KAC5CC,EAD4C,KAGtD,OADAF,EAAIC,GAAKC,EACFF,IACN,IACLG,QAAQC,IAAIC,KAAKC,UAAUR,EAAG,KAAM,IGuDQS,CAAUxB,KAAhD,gBACA,kBAAC,IAAD,CAAQH,QAAS,kBAAMJ,EAAS,CAAEL,KAAM,QAASM,QAAS,OAA1D,iBAEF,kBAAC,IAAD,MACA,kBAAC,IAAW+B,MAAZ,CAAkBC,MAAO,GAAzB,wDACA,yBAAKC,IAAI,cAAcC,IAAI,KAC3B,yBAAKD,IAAI,kBAAkBC,IAAI,KAC/B,yBAAKD,IAAI,YAAYC,IAAI,OCzDXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2a9ee03d.chunk.js","sourcesContent":["export function printList(list: Array<string>): void {\n  const o = list\n    .reduce((acc: { [k: string]: string }, item: string) => {\n      const [k, v] = item.split('=').map(a => a.trim());\n      acc[k] = v;\n      return acc;\n    }, {});\n  console.log(JSON.stringify(o, null, 2));\n}\n\nexport function trimPair(str: string): string[] {\n  return str.split('=').map(a => a.trim());\n}\n\nexport function trimAndFormat(str: string): string {\n  return trimPair(str).join('=');\n}\n\nexport function checkFormat(str: string): boolean {\n  try {\n    const pair = trimPair(str);\n    return Array.isArray(pair) && pair.length === 2 && pair[0].length > 0 && pair[1].length > 0;\n  } catch (e) {\n    return false;\n  }\n}\n","import React, { useState } from 'react';\nimport { Input, Tag } from 'antd';\nimport { checkFormat } from './utils';\n\nexport default function OnePair(props: {\n  value: string,\n  index: number,\n  dispatch: React.Dispatch<{ type: string, payload: { value?: string, index?: number } }>,\n}) {\n  const [inputVisible, setInputVisible] = useState(false);\n  const [temp, setTemp] = useState(props.value);\n  const [inputError, setInputError] = useState(false);\n  const update = (value: string) => {\n    const valid = checkFormat(value);\n    if (valid) {\n      props.dispatch({ type: 'update', payload: { value, index: props.index } });\n      setInputVisible(false);\n      setTemp(value);\n      setInputError(false);\n    } else {\n      setInputError(true);\n    }\n  }\n\n  return inputVisible ? (\n    <span className={'input-length' + (inputError ? ' has-error' : '')}>\n      <Input\n        type=\"text\"\n        size=\"small\"\n        value={temp}\n        onChange={(e) => setTemp(e.target.value)}\n        onPressEnter={() => update(temp)}\n      />\n    </span>\n  ) : (\n      <Tag\n        closable\n        onClick={() => setInputVisible(true)}\n        onClose={() => props.dispatch({ type: 'remove', payload: { index: props.index } })}\n      >{props.value}</Tag>\n    )\n}\n\n","import { trimAndFormat } from './utils';\n\nexport default function reducer(state: Array<string>, action: { type: string, payload: { value?: string, index?: number } }) {\n  const { type, payload } = action;\n  switch (type) {\n    case 'append': {\n      const { value } = payload;\n      if (value === undefined) {\n        return state;\n      }\n      state.push(trimAndFormat(value));\n      return state.slice(0);\n    }\n    case 'remove': {\n      const { index } = payload;\n      if (index === undefined) {\n        return state;\n      }\n      if (index >= state.length) { return state; }\n      state.splice(index, 1);\n      return state.slice(0);\n    }\n    case 'update': {\n      const { index, value } = payload;\n      if (index === undefined || value === undefined) {\n        return state;\n      }\n      state.splice(index, 1, trimAndFormat(value));\n      return state.slice(0);\n    }\n    case 'clear':\n      return state.length > 0 ? [] : state;\n    default:\n      return state;\n  }\n}","import React, { useReducer, useState } from 'react';\nimport { Button, Input, Divider, Typography } from 'antd';\nimport './App.css';\nimport { checkFormat, printList } from './utils';\nimport PairItem from './PairItem';\nimport PairReducer from './PairReducer';;\n\nfunction App() {\n  const [state, dispatch] = useReducer(PairReducer, []);\n  const [inputVisible, setInputVisible] = useState(false);\n  const [inputError, setInputError] = useState(false);\n  const [temp, setTemp] = useState('');\n\n  const appendOnePair = (pair: string) => {\n    const valid = checkFormat(pair);\n    if (valid) {\n      dispatch({ type: 'append', payload: { value: pair } });\n      setTemp('');\n      setInputVisible(false);\n      setInputError(false);\n    } else {\n      setInputError(true);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <div>\n        <label>自定义搜索项：</label>\n        {\n          state.map((item, idx) => (\n            <PairItem\n              key={item + idx}\n              value={item}\n              index={idx}\n              dispatch={dispatch}\n            />\n          ))\n        }\n        {\n          inputVisible ? (\n            <span className={'input-length' + (inputError ? ' has-error' : '')}>\n              <Input\n                type=\"text\"\n                size=\"small\"\n                placeholder=\"请输入 key=value ，回车确认\"\n                value={temp}\n                onChange={(e) => setTemp(e.target.value)}\n                onPressEnter={() => appendOnePair(temp)}\n              />\n            </span>\n          ) : (\n              <Button\n                size=\"small\"\n                type=\"dashed\"\n                icon=\"plus\"\n                onClick={() => setInputVisible(true)}\n              >添加</Button>\n            )\n        }\n      </div>\n      <div className=\"buttons\">\n        <Button type=\"primary\" onClick={() => printList(state)}>查询</Button>\n        <Button onClick={() => dispatch({ type: 'clear', payload: {} })}>清空</Button>\n      </div>\n      <Divider />\n      <Typography.Title level={4}>Feel Free to play like the following pictures shows.</Typography.Title>\n      <img src=\"/layout.png\" alt=\"\" />\n      <img src=\"/add_delete.gif\" alt=\"\" />\n      <img src=\"/edit.gif\" alt=\"\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}